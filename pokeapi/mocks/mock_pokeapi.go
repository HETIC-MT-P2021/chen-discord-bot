// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/HETIC-MT-P2021/chen-discord-bot/pokeapi (interfaces: PokemonInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	pokeapi "github.com/HETIC-MT-P2021/chen-discord-bot/pokeapi"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPokemonInterface is a mock of PokemonInterface interface
type MockPokemonInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPokemonInterfaceMockRecorder
}

// MockPokemonInterfaceMockRecorder is the mock recorder for MockPokemonInterface
type MockPokemonInterfaceMockRecorder struct {
	mock *MockPokemonInterface
}

// NewMockPokemonInterface creates a new mock instance
func NewMockPokemonInterface(ctrl *gomock.Controller) *MockPokemonInterface {
	mock := &MockPokemonInterface{ctrl: ctrl}
	mock.recorder = &MockPokemonInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPokemonInterface) EXPECT() *MockPokemonInterfaceMockRecorder {
	return m.recorder
}

// Category mocks base method
func (m *MockPokemonInterface) Category() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].(string)
	return ret0
}

// Category indicates an expected call of Category
func (mr *MockPokemonInterfaceMockRecorder) Category() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockPokemonInterface)(nil).Category))
}

// Description mocks base method
func (m *MockPokemonInterface) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description
func (mr *MockPokemonInterfaceMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockPokemonInterface)(nil).Description))
}

// ID mocks base method
func (m *MockPokemonInterface) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPokemonInterfaceMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPokemonInterface)(nil).ID))
}

// Image mocks base method
func (m *MockPokemonInterface) Image() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Image")
	ret0, _ := ret[0].(string)
	return ret0
}

// Image indicates an expected call of Image
func (mr *MockPokemonInterfaceMockRecorder) Image() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockPokemonInterface)(nil).Image))
}

// Link mocks base method
func (m *MockPokemonInterface) Link() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link")
	ret0, _ := ret[0].(string)
	return ret0
}

// Link indicates an expected call of Link
func (mr *MockPokemonInterfaceMockRecorder) Link() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockPokemonInterface)(nil).Link))
}

// Name mocks base method
func (m *MockPokemonInterface) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPokemonInterfaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPokemonInterface)(nil).Name))
}

// Stats mocks base method
func (m *MockPokemonInterface) Stats() []pokeapi.PokemonInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].([]pokeapi.PokemonInfo)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockPokemonInterfaceMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockPokemonInterface)(nil).Stats))
}

// Title mocks base method
func (m *MockPokemonInterface) Title() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Title")
	ret0, _ := ret[0].(string)
	return ret0
}

// Title indicates an expected call of Title
func (mr *MockPokemonInterfaceMockRecorder) Title() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Title", reflect.TypeOf((*MockPokemonInterface)(nil).Title))
}

// Types mocks base method
func (m *MockPokemonInterface) Types() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Types")
	ret0, _ := ret[0].(string)
	return ret0
}

// Types indicates an expected call of Types
func (mr *MockPokemonInterfaceMockRecorder) Types() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Types", reflect.TypeOf((*MockPokemonInterface)(nil).Types))
}
